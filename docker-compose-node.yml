version: "3.6"

services:
  backend:
    build: ./backend
    image: private-registry:5000/backend-demo
    hostname: "{{.Node.Hostname}}-backend"
    networks:
      - proxy
    deploy:
      labels:
        - com.df.notify=true
        - com.df.distribute=true
        - com.df.servicePath=/
        - com.df.port=80
        - com.df.srcPort=8003
    #ports:
    #  - '8003:80'
  portainer:
    image: portainer/portainer
    restart: on-failure
    ports:
      - 8083:9000
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    deploy:
      placement:
        constraints:
          - node.role == manager
  registry:
    #restart: always
    image: registry:2
    hostname: private-registry
    container_name: private-registry
    ports:
      - "5000:5000"
    #networks:
    #  - proxy
    #deploy:
    #  labels:
    #    - com.df.notify=true
    #    - com.df.servicePath=/
    #    - com.df.port=5000
    #    - com.df.srcPort=5000
    #environment:
      #REGISTRY_HTTP_TLS_CERTIFICATE: /certs/domain.crt
      #REGISTRY_HTTP_TLS_KEY: /certs/domain.key
      #REGISTRY_AUTH: htpasswd
      #REGISTRY_AUTH_HTPASSWD_PATH: /auth/htpasswd
      #REGISTRY_AUTH_HTPASSWD_REALM: Registry Realm
    volumes:
      - registry:/var/lib/registry
      - './registry/certs:/certs'
      - './registry/auth:/auth'
  viz:
    image: dockersamples/visualizer
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    deploy:
      placement:
        constraints: [node.role == manager]
    ports:
      - "8082:8080"
networks:
  proxy:
    external: true
#    driver: overlay
volumes:
  registry:
