version: "3.6"

services:
  proxy:
    image: dockercloud/haproxy
    depends_on:
      - backend
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - target: 80
        published: 8003
        protocol: tcp
        mode: swarm
    networks:
      - proxy
    deploy:
      placement:
        constraints: [node.role == manager]
    environment:
      - BALANCE=leastconn
  backend:
    build: ./backend
    image: private-registry:5000/backend-demo
    hostname: "{{.Node.Hostname}}-backend"
    networks:
      - proxy
    ports:
      - target: 80
        published: 8080
        protocol: tcp
        mode: host
    environment:
      - SERVICE_PORTS=80
    #deploy:
    #  placement:
    #    constraints: [node.role == manager]
    #  replicas: 1
    #  update_config:
    #   parallelism: 5
    #   delay: 10s
    #  restart_policy:
    #   condition: on-failure
    #   max_attempts: 3
    #   window: 120s
    #ports:
    #  - '8003:80'
  registry:
    #restart: always
    image: registry:2
    hostname: private-registry
    container_name: private-registry
    ports:
      - "5000:5000"
    #networks:
    #  - proxy
    #deploy:
    #  labels:
    #    - com.df.notify=true
    #    - com.df.servicePath=/
    #    - com.df.port=5000
    #    - com.df.srcPort=5000
    #environment:
      #REGISTRY_HTTP_TLS_CERTIFICATE: /certs/domain.crt
      #REGISTRY_HTTP_TLS_KEY: /certs/domain.key
      #REGISTRY_AUTH: htpasswd
      #REGISTRY_AUTH_HTPASSWD_PATH: /auth/htpasswd
      #REGISTRY_AUTH_HTPASSWD_REALM: Registry Realm
    volumes:
      - registry:/var/lib/registry
      - './registry/certs:/certs'
      - './registry/auth:/auth'
networks:
  proxy:
    external: true
    driver: overlay
volumes:
  registry:
